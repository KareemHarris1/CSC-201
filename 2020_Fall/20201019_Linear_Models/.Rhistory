## Date Created: 2020-09-29
##
## Automated Y/N: N
##
## Email: drew.howell@gatewayfirst.com
##
## Notes: For a schedule of automated R jobs, reach out to Drew via email.
##
## load custom function library
source('//fs03/docs/Servicing/Operations_Support/Drew/Custom Functions/loadAll/loadAll.R')
##
## set working directory to report automation directory
setwd('//fs03/docs/MSR/analytics/roll-rates')
# start script -----------------------------------------------------------------
library(lubridate)
library(readr)
library(tidyr)
library(dplyr)
# getPD2Dt <- function(whole_or_part='whole',date=Sys.Date(),loanNums=NA){
#
#   # source('//fs03/docs/Servicing/Operations_Support/Drew/Custom Functions/loadAll/loadAll.R')
#   # setwd('//fs03/docs/Servicing/Operations_Support/Drew/Report Automation')
#   # library(lubridate)
#
#   date=dts[i]
#   date = format(as.Date(Sys.Date()) %m-% months(monDif(Sys.Date(),as.Date(date))),'%Y%m')
#
#   doc <- readLines('LoL_DelqStatusTemplate.sql')
#   doc[grep('righthere',doc)] <- paste0('from [dbo].[EOM_DB0000_SEG2000A_AccountGeneral_',date,']')
#   writeLines(doc,'LoL_DelqStatus_autogen.sql')
#
#   df <- autoQuery(
#    '//fs03/docs/Servicing/Operations_Support/Drew/Report Automation'
#    ,'LoL_DelqStatus_autogen'
#    ,'tc-SQL03'
#    ,'LOAN_DATA_HISTORICAL01'
#    ,F
#   )
#
#   df$timeStamp <- date
#   df$LMitFlg <- ifelse(df$LMitFlg=='NULL',NA,df$LMitFlg)
#   return(df)
#
# }
dts <- rev(seq.Date(as.Date('2014-11-01'),(Sys.Date()%m-% months(1)),'month'))
i=1
for ( i in
1:27
# 1:length(dts)
) {
date=dts[i]
date = format(as.Date(Sys.Date()) %m-% months(monDif(Sys.Date(),as.Date(date))),'%Y%m')
doc <- readLines('LoL_DelqStatusTemplate_coreStates.sql')
doc[grep('righthere',doc)] <- paste0('from [dbo].[EOM_DB0000_SEG2000A_AccountGeneral_',date,']')
writeLines(doc,'LoL_DelqStatus_autogen.sql')
df <- autoQuery(
'//fs03/docs/MSR/analytics/roll-rates'
,'LoL_DelqStatus_autogen'
,'tc-SQL03'
,'LOAN_DATA_HISTORICAL01'
,F
)
df$timeStamp <- dts[i]
if(i==1){
dfAll <-  df
}
dfAll <- full_join(dfAll,df)
}
# write_csv(dfAll,'//fs03/docs/Servicing/Operations_Support/Drew/Report Automation/dfAll.csv')
try(df <- dfAll)
########## DEV
# df <- df[seq(1,nrow(df),120),]
##########
df$due <- -1*mondf(as.Date(df$timeStamp, origin=as.Date('1970-01-01')), as.Date(df$PD_TO_DT, origin=as.Date('1970-01-01')))
df$PD_TO_DT <- NULL
df1 <- df[df$ClsCd != 'Inactive',]
df1$ClsCd <- df1$LMitFlg <- NULL
df1$cat <- ifelse(df1$due <= 0, 'Curr',
#  ifelse(df1$due == 0, 'Curr',
ifelse(df1$due == 1, '30',
ifelse(df1$due == 2, '60',
ifelse(df1$due == 3, '90',
ifelse(df1$due == 4, '120',
ifelse(df1$due > 4, '120+', NA )
)
)
)
)
#)
)
df1$due <- NULL
dft <- spread(df1, timeStamp, cat)
##### DEV
# dft <- dft[seq(1,nrow(dft),20),]
# View(df1[df1$ACCT_NBR == '70000035',])
###########
# dft <- arrange(df1, ACCT_NBR, timeStamp)
dfb <- dft
ans <- dft
for(i in 2:ncol(ans)){
ans[,i] <- NA
}
#ans <- apply(ans,2,NA)
sdq <- function(x){
ifelse(!is.na(x) & x %in% c('90','120','120+'),x <- 'SDQ',NA)
}
ans[,2:ncol(ans)] <- lapply(dft[,2:ncol(dft)],sdq)
i=4
j=34
for(i in 1:
# 500
nrow(dft)
){
x <- unlist(dft[i,2:ncol(dft)])
for(j in 3:(-1+ncol(dft))){
if(is.na(x[j])){
ans[i,(j+1)] <- 'Inactive'
}
if(!is.na(x[j])){
if(x[j] == '30' ){
if(!is.na(x[(j-1)])){
if(x[(j-1)] == 'Curr'){
ans[i,(j+1)] <- 'Curr_30'
}
if(x[(j-1)] == '30'){
ans[i,(j+1)] <- '30_30'
}
if(x[(j-1)] == '60'){
ans[i,(j+1)] <- '60_30'
}
if(x[(j-1)] == '90' | x[(j-1)] == '120+' | x[(j-1)] == '120'){
ans[i,(j+1)] <- 'SDQ_30'
}
}
}
if(x[j] == '60'){
if(!is.na(x[(j-1)])){
if(x[(j-1)] == '90' | x[(j-1)] == '120+' | x[(j-1)] == '120'){
ans[i,(j+1)] <- 'SDQ_60'
}
if(x[(j-1)] == 'Curr'){
ans[i,(j+1)] <- 'Curr_60'
}
if(x[(j-1)] == '30'){
ans[i,(j+1)] <- '30_60'
}
if(x[(j-1)] == '60'){
ans[i,(j+1)] <- '60_60'
}
}
}
if(x[j] == '90' | x[j] == '120' | x[j] == 'SDQ' | x[j] == '120+'){
if(!is.na(x[(j-1)])){
if(x[(j-1)] == '90' | x[(j-1)] == '120' | x[(j-1)] == '120+' | x[(j-1)] == 'SDQ'){
ans[i,(j+1)] <- 'SDQ_SDQ'
}
if(x[(j-1)] == '60'){
ans[i,(j+1)] <- '60_SDQ'
}
if(x[(j-1)] == '30'){
ans[i,(j+1)] <- '30_SDQ'
}
if(x[(j-1)] == 'Curr'){
ans[i,(j+1)] <- 'Curr_SDQ'
}
}
}
if(x[j]=='Curr'){
if(!is.na(x[(j-1)])){
if(x[(j-1)]=='Curr'){
ans[i,(j+1)] <- 'C_C'
}
if(x[(j-1)]=='30'){
ans[i,(j+1)] <- '30_Curr'
}
if(x[(j-1)]=='60'){
ans[i,(j+1)] <- '60_Curr'
}
if('Curr' %in% x[2:(j-1)]){
if('90' %in% x[(which(x[2:(j-1)]=='Curr')[length(which(x[2:(j-1)]=='Curr'))]+1):(j-1)] |
'120+' %in% x[(which(x[2:(j-1)]=='Curr')[length(which(x[2:(j-1)]=='Curr'))]+1):(j-1)]){
ans[i,(j+1)] <- 'Cure'
}
}
if(!'Curr' %in% x[2:(j-1)]){
if('90' %in% x[2:(j-1)]){
ans[i,(j+1)] <- 'Cure'
}
if('120' %in% x[2:(j-1)]){
ans[i,(j+1)] <- 'Cure'
}
if('120+' %in% x[2:(j-1)]){
ans[i,(j+1)] <- 'Cure'
}
}
}else if (is.na(x[(j-1)])){
ans[i,(j+1)] <- 'First_Pmt'
}
}
}
}
}
# i=which(ans$ACCT_NBR=='50049667')
# j=8
# ans[i,]
for(i in 1:
# 500
nrow(ans)
){
x <- unlist(ans[i,2:ncol(ans)])
for(j in 3:(-1+ncol(ans))){
if(!is.na(x[j])){
if(grepl('SDQ',x[j])){
# if('Redefault' %in% x[2:(j-1)]){
#   next
# }
if ('Redefault' %in% x[2:(j-1)]){
if('Cure' %in% x[which(x=='Redefault')[length(which(x=='Redefault'))]:(j-1)]){
ans[i,(j+1)] <- 'Redefault'
x[j] <- 'Redefault'
}
} else if('Cure' %in% x[2:(j-1)] & !'Redefault' %in% x[2:(j-1)]){
ans[i,(j+1)] <- 'Redefault'
x[j] <- 'Redefault'
}
}
}
}
}
# loop for change redefault to sdq unless cure in between this redefault the one before that.
# change NA immediately following inactive to "Boarded"
# cure's look fine for now.
# i=1
# # for (i in 1:ncol(ans)){
# #   x <- ifelse(is.na(unlist(ans[,i])),'NULL',ans[,i])
# # }
# x[1:150]
cont_SDQ <- NA
cont_60 <- NA
cont_30 <- NA
cont_curr <- NA
n3060 <- NA
n30sdq <- NA
n30curr <- NA
n6030 <- NA
n60sqd <- NA
n60curr <- NA
ncurrcurr <- NA
ncurr30 <- NA
ncurr60 <- NA
ncurrsdq <- NA
cure <- NA
redefault <- NA
inactive <- NA
active <- NA
i=4
for(i in 4:ncol(ans)){
x <-
unlist(
ans[
#1:500
,i]
)
cont_SDQ[(i-3)] <- sum('SDQ_SDQ'==x, na.rm=T)
cont_60[(i-3)] <- sum('60_60'==x, na.rm=T)
cont_30[(i-3)] <- sum('30_30'==x, na.rm=T)
cont_curr[(i-3)] <- sum('C_C'==x, na.rm=T)
n3060[(i-3)] <- sum('30_60'==x, na.rm=T)
n30sdq[(i-3)] <- sum('30_SDQ'==x, na.rm=T)
n30curr[(i-3)] <- sum('30_Curr'==x, na.rm=T)
n6030[(i-3)] <- sum('60_30'==x, na.rm=T)
n60sqd[(i-3)] <- sum('60_SDQ'==x, na.rm=T)
n60curr[(i-3)] <- sum('60_Curr'==x, na.rm=T)
ncurr30[(i-3)] <- sum('Curr_30'==x, na.rm=T)
ncurr60[(i-3)] <- sum('Curr_60'==x, na.rm=T)
ncurrsdq[(i-3)] <- sum('Curr_SDQ'==x, na.rm=T)
cure[(i-3)] <- sum('Cure'==x, na.rm=T)
redefault[(i-3)] <- sum('Redefault'==x, na.rm=T)
inactive[(i-3)] <- sum('Inactive'==x, na.rm=T)
active[(i-3)] <- sum(!'Inactive'==x, na.rm=T)
}
#
# cont_SDQ
# cont_60 <- NA
# cont_30 <- NA
# cont_curr <- NA
#
# n3060 <- NA
# n30sdq <- NA
# n30curr <- NA
#
# n6030 <- NA
# n60sqd <- NA
# n60curr <- NA
#
# ncurrcurr <- NA
# ncurr30 <- NA
# ncurr60 <- NA
# ncurrsdq <- NA
#
# cure <- NA
# redefault <- NA
#
# inactive <- NA
# active <- NA
name <- names(ans)[4:ncol(ans)]
counts <- data.frame(
'Date'=name
,'Active' = active
,'Inactive' = inactive
,'Curr - Curr' = cont_curr
,'30 - 30' = cont_30
,'60 - 60' = cont_60
,'SDQ - SDQ' = cont_SDQ
,'Curr - 30' = ncurr30
,'Curr - 60' = ncurr60
,'30 - 60' = n3060
,'30 - SDQ' = n30sdq
,'60 - SDQ' = n60sqd
,'30 - Curr' = n30curr
,'60 - 30' = n6030
,'60 - Curr' = n60curr
,'Curr - SDQ' = ncurrsdq
,'Cure' = cure
,'Redefault' = redefault
)
cureTime <- NA
redTime <- NA
for(i in 1:
#500
nrow(ans)
){
x <- unlist(ans[i,4:ncol(ans)])
if('Cure' %in% x & TRUE %in% grepl('SDQ',x[1:length(x)])){
cureTime[i] <- which('Cure' == x) - grep('SDQ',x[1:length(x)])[1]
}
if('Redefault' %in% x){
redTime[i] <-  which('Redefault' == x) - grep('Cure',x[1:length(x)])[1]
}
}
cureTime <- na.omit(cureTime)
redTime <- na.omit(redTime)
ans <- ans[,-c(2,3)]
# ans$Date <- format(as.Date(ans$Date), '%m/%d/%Y')
li
View(ans)
library(openxlsx)
wb <- createWorkbook()
addWorksheet(wb, 'raw_counts')
addWorksheet(wb, 'raw_times')
# addWorksheet(wb, 'loan-level')
# writeData(wb, 'loan-level', ans)
writeData(wb, 'raw_counts', counts)
writeData(wb, 'raw_times', cureTime)
writeData(wb, 'raw_times', startCol = 3, redTime)
saveWorkbook(wb, paste0('\\\\fs03\\docs\\MSR\\analytics\\roll-rates\\roll_report_'
,format(Sys.Date(),'%Y%m%d')
,'.xlsx'), overwrite=T)
library(readr)
setwd('C:/Users/drew.howell/Desktop/CSC_201/Fall_2020/20201019_Linear_Models/education_county.csv')
setwd('C:/Users/drew.howell/Desktop/CSC_201/Fall_2020/20201019_Linear_Models/')
setwd('C:/Users/drew.howell/Desktop/CSC-201/2020_Fall/20201019_Linear_Models/')
education <- read_csv('education_county.csv')
voted <- read_csv('voted_county.csv')
View(voted)
unique(paste(voted$county, voted$state))
voted$ID <- paste(voted$county, voted$state)
ids <- unique(voted$ID)
voted$ID <- paste(voted$county, voted$state)
ids <- unique(voted$ID)
i=1
temp <- voted[voted$ID == ids[i],]
View(temp)
voted <- voted[voted$year == max(voted$year),]
View(voted)
ids <- unique(voted$ID)
i=1
temp <- voted[voted$ID == ids[i],]
x <- temp[temp$candidatevotes == max(temp$candidatevotes),]
View(x)
View(temp)
temp$candidatevotes[temp$party=='Democrat',]/temp$totalvotes[temp$party=='Democrat',] *10
temp$candidatevotes[temp$party=='Democrat']/temp$totalvotes[temp$party=='Democrat'] *10
View(temp)
temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10
temp$candidatevotes[temp$party=='democrat']
-na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))
na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10))
-na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10)) +
na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10))
-na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10)) +
na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10))[[1]]
-as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10)) +
na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10)))
as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10)))
-as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10)))
-as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))) +
as.numeric(na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10)))
setwd('C:/Users/drew.howell/Desktop/CSC-201/2020_Fall/20201019_Linear_Models/')
education <- read_csv('education_county.csv')
voted <- read_csv('voted_county.csv')
voted$ID <- paste(voted$county, voted$state)
voted <- voted[voted$year == max(voted$year),]
ids <- unique(voted$ID)
i=1
for (i in 1:length(ids)){
temp <- voted[voted$ID == ids[i],]
temp$spectrum <- -as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))) +
as.numeric(na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10)))
x <- temp[temp$candidatevotes == max(temp$candidatevotes),]
if(i==1){
clean_voted <- x
} else {
clean_voted <- rbind(clean_voted, x)
}
}
temp <- voted[voted$ID == ids[i],]
temp$spectrum <- -as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))) +
as.numeric(na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10)))
temp$candidatevotes[temp$party=='democrat']
temp$candidatevotes[temp$party=='republican']
View(temp)
education <- read_csv('education_county.csv')
voted <- read_csv('voted_county.csv')
voted$ID <- paste(voted$county, voted$state)
voted <- voted[voted$year == max(voted$year),]
ids <- unique(voted$ID)
i=1
for (i in 1:length(ids)){
temp <- voted[voted$ID == ids[i],]
if(!F %in% is.na(temp$candidatevotes)){
next
}
temp$spectrum <- -as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))) +
as.numeric(na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10)))
x <- temp[temp$candidatevotes == max(temp$candidatevotes),]
if(i==1){
clean_voted <- x
} else {
clean_voted <- rbind(clean_voted, x)
}
}
View(clean_voted)
View(education)
education <- education[!is.na(education$`2003 Rural-urban Continuum Code`),]
View(education)
education <- read_csv('education_county.csv')
library(readr)
setwd('/Users/drewhowell/Desktop/CSC-201/2020_Fall/20201019_Linear_Models/')
education <- read_csv('education_county.csv')
voted <- read_csv('voted_county.csv')
pops <- read_csv('populations_county.csv')
View(education)
View(pops)
View(voted)
voted$ID <- paste(voted$county, voted$state_po)
View(voted)
voted <- voted[voted$year == max(voted$year),]
voted$version <- NULL
ids <- unique(voted$ID)
for (i in 1:length(ids)){
temp <- voted[voted$ID == ids[i],]
if(!F %in% is.na(temp$candidatevotes)){
next
}
temp$spectrum <- (-as.numeric(na.omit((temp$candidatevotes[temp$party=='democrat']/temp$totalvotes[temp$party=='democrat'] *10))) +
as.numeric(na.omit((temp$candidatevotes[temp$party=='republican']/temp$totalvotes[temp$party=='republican'] *10))))[1]
x <- temp[temp$candidatevotes == max(temp$candidatevotes),]
if(i==1){
clean_voted <- x
} else {
clean_voted <- rbind(clean_voted, x)
}
}
View(clean_voted)
View(temp)
education <- education[!is.na(education$`2003 Rural-urban Continuum Code`),]
education$ed_spectrum <- -(2*education$`Percent of adults with less than a high school diploma, 2014-18` +
education$`Percent of adults with a high school diploma only, 2014-18`) +
education$`Percent of adults completing some college or associate's degree, 2014-18` +
education$`Percent of adults with a bachelor's degree or higher, 2014-18`*2
View(education)
library(dplyr)
education <- select(education, State, `Area name`, ed_spectrum)
education <- education[-1,]
education$`Area name` <- gsub(' County','', education$`Area name`)
education$ID <- paste(education$`Area name`, education$State)
education$State <- education$`Area name` <- NULL
View(education)
df <- inner_join(clean_voted, education, by = c('ID' = 'ID'))
pops$CTYNAME <- gsub(' County','', pops$CTYNAME)
for(i in 1:nrow(pops)){
pops$STNAME[i] <- ifelse(length(state.abb[grep(pops$STNAME[i], state.name)])==0, NA, state.abb[grep(pops$STNAME[i], state.name)])
}
pops$ID <- paste(pops$CTYNAME, pops$STNAME)
pops <- select(pops, ID, POPESTIMATE2019)
pops <- pops[!duplicated(pops$ID),]
View(pops)
df <- inner_join(df, pops)
View(df)
df$turnout <- df$totalvotes / df$POPESTIMATE2019
df <- df[df$turnout < 1,]
View(df)
model <- lm(spectrum ~ turnout + ed_spectrum, df)
lm(spectrum ~ turnout + ed_spectrum, df)
library(jtools)
model_a <- lm(spectrum ~ turnout, df)
model_b <- lm(spectrum ~ ed_spectrum, df)
library(jtools)
summ(model)
summ(model_a)
summ(model_b)
